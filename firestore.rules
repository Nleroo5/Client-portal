rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null &&
             get(/databases/$(database)/documents/salesReps/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if user is a sales rep
    function isRep() {
      return request.auth != null &&
             exists(/databases/$(database)/documents/salesReps/$(request.auth.uid));
    }

    // Helper function to check if rep owns the resource
    function isRepOwner(repId) {
      return request.auth != null && request.auth.uid == repId;
    }

    // Client Portals - Allow unauthenticated read access (clients access via URL with client ID)
    // Admin can write, anyone can read (portal is password-protected at app level)
    match /clients/{clientId} {
      allow read: if true;  // Allow unauthenticated read (protected by temp password in portal)
      allow write: if isAdmin();

      // Allow clients to update only specific progress and data fields (not sensitive fields)
      allow update: if request.resource.data.diff(resource.data).affectedKeys()
                       .hasOnly(['step1Complete', 'step2Complete', 'step3Complete',
                                'step4Complete', 'step5Complete', 'step6Complete',
                                'brandLogoUrl', 'brandLogoFileName', 'brandColors',
                                'brandPrimaryColor', 'brandSecondaryColor', 'brandAssets',
                                'metaBusinessManagerId', 'metaAdAccountId', 'metaPageId',
                                'metaPixelId', 'metaBusinessManagerUrl', 'metaBusinessManagerEmail',
                                'ga4PropertyId', 'ga4MeasurementId', 'googleAnalyticsEmail',
                                'websiteAccessMethod', 'websiteUrl', 'websiteUsername',
                                'websitePassword', 'hostingProvider', 'hasUnreviewedWebsiteAccess',
                                'currentStep', 'completedSteps', 'progress',
                                'lastUpdated', 'updatedAt']);
    }

    // Sales Reps - Allow unauthenticated users to list active reps (for login dropdown)
    // Authenticated reps can read their own data, admins can read/write/delete all
    match /salesReps/{repId} {
      // Allow admins to do everything
      allow read, write, delete: if isAdmin();

      // Allow anyone to read basic info of active reps (for login page dropdown)
      // Allow authenticated users to read their own document (needed for isAdmin check)
      allow read: if resource.data.active == true ||
                     (request.auth != null && request.auth.uid == repId);

      // EMERGENCY: Allow authenticated users to create their own admin document ONCE
      // This is for initial admin setup or recovery from accidental deletion
      allow create: if request.auth != null &&
                       request.auth.uid == repId &&
                       request.resource.data.email == request.auth.token.email &&
                       request.resource.data.role == 'admin';
    }

    // Deals - Reps can read their own, update limited stages. Admins can do everything.
    match /deals/{dealId} {
      // Admins can do everything (put this first for priority)
      allow read, write, delete: if isAdmin();

      // Reps can read deals assigned to them
      allow read: if isRep() &&
                     resource.data.assignedTo == request.auth.uid;

      // Reps can create deals
      allow create: if isRep() &&
                       request.resource.data.assignedTo == request.auth.uid &&
                       request.resource.data.stage in ['qualified', 'cold-outreach', 'follow-up', 'discovery-scheduled'];

      // Reps can only update deals assigned to them and only to allowed stages
      allow update: if isRep() &&
                       resource.data.assignedTo == request.auth.uid &&
                       (
                         // Can only change stage to allowed stages or mark as lost
                         !request.resource.data.diff(resource.data).affectedKeys().hasAny(['stage']) ||
                         request.resource.data.stage in ['qualified', 'cold-outreach', 'follow-up', 'discovery-scheduled', 'closed-lost']
                       );
    }

    // Scorecard - Admins can write, reps can read all scorecards (for leaderboard)
    match /scorecard/{scorecardId} {
      // Reps can read all scorecards to view leaderboard
      allow read: if isRep();

      // Only admins can write scorecard data
      allow write: if isAdmin();
    }

    // Targets - Admins only (deprecated, but keeping for backwards compatibility)
    match /targets/{targetId} {
      allow read: if isRep();
      allow write: if isAdmin();
    }

    // Deal audit trail
    match /dealAudit/{auditId} {
      allow read: if isRep() || isAdmin();
      allow write: if isRep() || isAdmin();
    }

    // Messages - Client-Admin messaging system
    match /messages/{clientId} {
      // Admins can read/write all messages
      allow read, write: if isAdmin();

      // Clients can read and write to their own message thread (unauthenticated access)
      allow read, write: if true;  // Protected by client portal URL parameter

      // Message thread subcollection
      match /thread/{messageId} {
        // Admins can read/write all messages
        allow read, write: if isAdmin();

        // Clients can read and write to their own thread
        allow read, write: if true;  // Protected by client portal URL parameter
      }
    }

    // Website Quotes - Discovery forms for website projects
    match /websiteQuotes/{quoteId} {
      // Admins can read/write all quotes
      allow read, write: if isAdmin();

      // Allow unauthenticated read/write for clients filling out their own form
      // Protected by unique quote ID in URL
      allow read, write, create: if true;
    }

    // Website Quotes (hyphenated collection name - same as above)
    match /website-quotes/{quoteId} {
      // Admins can read/write all quotes
      allow read, write: if isAdmin();

      // Allow unauthenticated read/write for clients filling out their own form
      // Protected by unique quote ID in URL
      allow read, write, create: if true;
    }

    // Notifications - In-portal notification system
    match /notifications/{notificationId} {
      // Admins can read all notifications
      allow read: if isAdmin();

      // Sales reps can read their own notifications
      allow read: if isRep() &&
                     resource.data.recipientId == request.auth.uid &&
                     resource.data.recipientType == 'sales-rep';

      // Admins can read admin notifications
      allow read: if isAdmin() &&
                     resource.data.recipientType == 'admin';

      // Allow unauthenticated creation (notifications created by system events)
      allow create: if true;

      // Allow updates to mark as read (by owner only)
      allow update: if (isAdmin() && resource.data.recipientType == 'admin') ||
                       (isRep() && resource.data.recipientId == request.auth.uid && resource.data.recipientType == 'sales-rep') ||
                       (resource.data.recipientType == 'client');

      // Only admins can delete notifications
      allow delete: if isAdmin();
    }

    // CMS Clients - Website CMS user access
    match /cmsClients/{clientId} {
      // Admins can read/write all CMS clients
      allow read, write: if isAdmin();

      // Allow unauthenticated read for login verification (needed for first-time account creation)
      // Only exposes email and active status for login flow
      allow read: if true;

      // CMS users can update their own record (for account creation)
      allow update: if request.auth != null &&
                       request.auth.token.email == resource.data.email;
    }

    // Website Content - CMS content storage
    match /websiteContent/{clientId}/{document=**} {
      // Admins can read/write all content
      allow read, write: if isAdmin();

      // CMS users can read/write their own content
      allow read, write: if request.auth != null &&
                            exists(/databases/$(database)/documents/cmsClients/$(clientId)) &&
                            get(/databases/$(database)/documents/cmsClients/$(clientId)).data.email == request.auth.token.email &&
                            get(/databases/$(database)/documents/cmsClients/$(clientId)).data.active == true;

      // Allow public read for website templates (so websites can load)
      allow read: if true;
    }

    // Settings - System configuration
    match /settings/{settingId} {
      // Anyone can read settings (needed for client portals to load branding/contact info)
      allow read: if true;

      // Only admins can write settings
      allow write: if isAdmin();
    }

    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
